import unittest
import More_calcs
import Line_Detection

class IntTest(unittest.TestCase):
    def test_distbwmidpoints1(self):
        x1 =  8
        y1 =  4
        x2 =  21
        y2 =  2
        x3 =  5
        y3 =  17
        x4 =  1
        y4 =  10
        res =  14.866068747318506

        self.assertEqual(res, More_calcs.distr_between_midpoints(x1, y1, x2, y2 ,x3, y3, x4, y4))
    
    def test_distbwmidpoints2(self):
        x1 =  10
        y1 =  9
        x2 =  17
        y2 =  9
        x3 =  5
        y3 =  17
        x4 =  3
        y4 =  22
        res =  13.45362404707371

        self.assertEqual(res, More_calcs.distr_between_midpoints(x1, y1, x2, y2 ,x3, y3, x4, y4))

    def test_distbwmidpoints3(self):
        x1 =  5
        y1 =  3
        x2 =  17
        y2 =  9
        x3 =  1
        y3 =  4
        x4 =  6
        y4 =  12
        res =  8.246211251235321

        self.assertEqual(res, More_calcs.distr_between_midpoints(x1, y1, x2, y2 ,x3, y3, x4, y4))
    
    def test_distbwmidpoints4(self):
        x1 =  1
        y1 =  4
        x2 =  4
        y2 =  7
        x3 =  4
        y3 =  14
        x4 =  8
        y4 =  18
        res =  11.704699910719626

        self.assertEqual(res, More_calcs.distr_between_midpoints(x1, y1, x2, y2 ,x3, y3, x4, y4))

    def test_distbwmidpoints5(self):
        x1 =  4
        y1 =  1
        x2 =  4
        y2 =  4
        x3 =  7
        y3 =  8
        x4 =  2
        y4 =  16
        res =  10.0

        self.assertEqual(res, More_calcs.distr_between_midpoints(x1, y1, x2, y2 ,x3, y3, x4, y4))

    # def test_if_angle_inside_ret_avg1(self):
    #     x =  111
    #     y =  49
    #     z =  295
    #     res =  260.0
    #     self.assertEqual(res, More_calcs.if_angle_inside_ret_avg(x, y, z))

    # def test_if_angle_inside_ret_avg2(self):
    #     x =  18
    #     y =  293
    #     z =  22
    #     res =  155.5
    #     self.assertEqual(res, More_calcs.if_angle_inside_ret_avg(x, y, z))

    # def test_if_angle_inside_ret_avg3(self):
    #     x =  145
    #     y =  50
    #     z =  257
    #     res =  277.5
    #     self.assertEqual(res, More_calcs.if_angle_inside_ret_avg(x, y, z))

    # def test_if_angle_inside_ret_avg4(self):
    #     x =  24
    #     y =  86
    #     z =  28
    #     res =  55.0
    #     self.assertEqual(res, More_calcs.if_angle_inside_ret_avg(x, y, z))

    # def test_if_angle_inside_ret_avg5(self):
    #     x =  177
    #     y =  132
    #     z =  232
    #     res =  334.5
    #     self.assertEqual(res, More_calcs.if_angle_inside_ret_avg(x, y, z))

    # def test_in_circle1(self):
    #     x =  35
    #     y =  45
    #     r =  16
    #     x_circle =  0
    #     y_circle =  41
    #     res =  False
    #     self.assertEqual(res, More_calcs.in_circle(x,y,r, x_circle, y_circle))
    
    # def test_in_circle2(self):
    #     x =  17
    #     y =  16
    #     r =  31
    #     x_circle =  29
    #     y_circle =  9
    #     res =  True
    #     self.assertEqual(res, More_calcs.in_circle(x,y,r, x_circle, y_circle))

    # def test_in_circle3(self):
    #     x =  8
    #     y =  49
    #     r =  11
    #     x_circle =  12
    #     y_circle =  42
    #     res =  True
    #     self.assertEqual(res, More_calcs.in_circle(x,y,r, x_circle, y_circle))

    # def test_in_circle4(self):
    #     x =  21
    #     y =  50
    #     r =  1
    #     x_circle =  46
    #     y_circle =  45
    #     res =  False
    #     self.assertEqual(res, More_calcs.in_circle(x,y,r, x_circle, y_circle))

    # def test_in_circle5(self):
    #     x =  10
    #     y =  9
    #     r =  15
    #     x_circle =  41
    #     y_circle =  19
    #     res =  False
    #     self.assertEqual(res, More_calcs.in_circle(x,y,r, x_circle, y_circle))

    # def test_del_redundant_lines1(self):
    #     line_levels = {0: [], 1: [[[(394, 304), (446, 301)], 3.3018656744350037], [[(337, 358), (339, 511)], 90.74892178282383], [[(183, 303), (286, 303)], 180.0], [[(180, 307), (286, 307)], 180.0], [[(366, 351), (444, 485)], 300.2032377549427], [[(365, 354), (392, 393)], 304.695153531234], [[(367, 351), (397, 394)], 304.9024956159247], [[(385, 332), (519, 409)], 330.11716765458715], [[(385, 333), (519, 410)], 330.11716765458715]], 2: [[[(442, 304), (653, 304)], 0.0], [[(340, 202), (342, 97)], 88.9087837747374], [[(337, 358), (339, 511)], 90.74892178282383], [[(337, 145), (338, 202)], 91.00508600525417], [[(69, 148), (249, 251)], 150.22085089643016], [[(202, 229), (249, 255)], 151.0490047925332], [[(183, 303), (286, 303)], 180.0], [[(180, 307), (286, 307)], 180.0], [[(159, 411), (251, 358)], 209.94568344039516], [[(157, 408), (249, 355)], 209.94568344039516], [[(159, 412), (251, 359)], 209.94568344039516], [[(160, 407), (245, 358)], 209.96218409641776], [[(236, 487), (291, 396)], 238.851419013805], [[(235, 487), (290, 395)], 239.12791663691968], [[(263, 435), (286, 394)], 240.70863782901574], [[(234, 486), (285, 393)], 241.26020470831196], [[(366, 351), (444, 485)], 300.2032377549427], [[(385, 332), (519, 409)], 330.11716765458715], [[(385, 333), (519, 410)], 330.11716765458715]], 3: [[[(442, 304), (653, 304)], 0.0], [[(474, 226), (520, 199)], 30.411081267125372], [[(475, 229), (606, 151)], 30.77040817878658], [[(477, 227), (564, 175)], 30.86680945113708], [[(419, 171), (445, 126)], 59.98163257239092], [[(416, 169), (442, 123)], 60.52411099675425], [[(340, 202), (342, 97)], 88.9087837747374], [[(338, 150), (338, 44)], 90], [[(337, 358), (339, 511)], 90.74892178282383], [[(211, 77), (262, 166)], 119.81416273779868], [[(210, 77), (263, 169)], 119.94568344039517], [[(181, 34), (260, 171)], 119.96956947656673], [[(70, 149), (203, 226)], 149.93141717813756], [[(69, 148), (249, 251)], 150.22085089643016], [[(134, 305), (181, 305)], 180.0], [[(159, 411), (251, 358)], 209.94568344039516], [[(157, 408), (249, 355)], 209.94568344039516], [[(159, 412), (251, 359)], 209.94568344039516], [[(160, 407), (245, 358)], 209.96218409641776], [[(236, 487), (291, 396)], 238.851419013805], [[(235, 487), (290, 395)], 239.12791663691968], [[(234, 486), (285, 393)], 241.26020470831196], [[(234, 484), (259, 438)], 241.47688139368796], [[(366, 351), (444, 485)], 300.2032377549427], [[(385, 332), (519, 409)], 330.11716765458715], [[(385, 333), (519, 410)], 330.11716765458715]], 4: [[[(442, 304), (653, 304)], 0.0], [[(475, 229), (606, 151)], 30.77040817878658], [[(477, 227), (564, 175)], 30.86680945113708], [[(338, 150), (338, 44)], 90], [[(211, 77), (262, 166)], 119.81416273779868], [[(210, 77), (263, 169)], 119.94568344039517], [[(181, 34), (260, 171)], 119.96956947656673], [[(192, 52), (235, 124)], 120.8465874121486], [[(70, 149), (203, 226)], 149.93141717813756], [[(69, 148), (249, 251)], 150.22085089643016]], 5: [[[(442, 304), (653, 304)], 0.0], [[(475, 229), (606, 151)], 30.77040817878658], [[(566, 176), (611, 149)], 30.96375653207352], [[(183, 35), (207, 77)], 119.74488129694221], [[(181, 34), (260, 171)], 119.96956947656673], [[(192, 52), (235, 124)], 120.8465874121486], [[(70, 149), (203, 226)], 149.93141717813756], [[(69, 148), (249, 251)], 150.22085089643016]]}
    #     res = {0: [], 1: [[[(394, 304), (446, 301)], 3.3018656744350037], [[(337, 358), (339, 511)], 90.74892178282383], [[(180, 307), (286, 307)], 180.0], [[(366, 351), (444, 485)], 300.2032377549427], [[(367, 351), (397, 394)], 304.9024956159247], [[(385, 332), (519, 409)], 330.11716765458715]], 2: [[[(442, 304), (653, 304)], 0.0], [[(337, 358), (339, 511)], 90.74892178282383], [[(69, 148), (249, 251)], 150.22085089643016], [[(180, 307), (286, 307)], 180.0], [[(159, 412), (251, 359)], 209.94568344039516], [[(235, 487), (290, 395)], 239.12791663691968], [[(366, 351), (444, 485)], 300.2032377549427], [[(385, 332), (519, 409)], 330.11716765458715]], 3: [[[(442, 304), (653, 304)], 0.0], [[(475, 229), (606, 151)], 30.77040817878658], [[(416, 169), (442, 123)], 60.52411099675425], [[(337, 358), (339, 511)], 90.74892178282383], [[(181, 34), (260, 171)], 119.96956947656673], [[(69, 148), (249, 251)], 150.22085089643016], [[(134, 305), (181, 305)], 180.0], [[(159, 412), (251, 359)], 209.94568344039516], [[(235, 487), (290, 395)], 239.12791663691968], [[(366, 351), (444, 485)], 300.2032377549427], [[(385, 332), (519, 409)], 330.11716765458715]], 4: [[[(442, 304), (653, 304)], 0.0], [[(475, 229), (606, 151)], 30.77040817878658], [[(338, 150), (338, 44)], 90], [[(181, 34), (260, 171)], 119.96956947656673], [[(69, 148), (249, 251)], 150.22085089643016]], 5: [[[(442, 304), (653, 304)], 0.0], [[(475, 229), (606, 151)], 30.77040817878658], [[(181, 34), (260, 171)], 119.96956947656673], [[(69, 148), (249, 251)], 150.22085089643016]]}
    #     self.assertEqual(res, Line_Detection.del_redundant_lines(line_levels))

    # def test_del_redundant_lines2(self):
    #     line_levels = {0: [], 1: [[[(358, 268), (412, 268)], 0.0], [[(209, 146), (271, 226)], 127.77568430595466], [[(208, 146), (272, 228)], 127.9716037610504], [[(142, 67), (270, 230)], 128.14169927622802], [[(149, 75), (270, 229)], 128.15722658736905], [[(268, 421), (291, 322)], 256.9208762199332], [[(267, 421), (290, 321)], 257.04723548662446], [[(283, 375), (294, 323)], 258.05582281155364], [[(271, 426), (293, 321)], 258.16635469383937], [[(353, 291), (489, 360)], 333.098907048459], [[(352, 295), (491, 360)], 334.93799174420553], [[(358, 272), (408, 273)], 358.85423716182487]], 2: [[[(412, 269), (565, 269)], 0.0], [[(324, 169), (338, 117)], 74.9315118405078], [[(326, 165), (352, 67)], 75.14138555207533], [[(329, 170), (342, 115)], 76.70142966950573], [[(272, 117), (284, 169)], 102.99461679191651], [[(267, 118), (280, 170)], 104.03624346792647], [[(209, 146), (271, 226)], 127.77568430595466], [[(208, 146), (272, 228)], 127.9716037610504], [[(142, 67), (270, 230)], 128.14169927622802], [[(149, 75), (270, 229)], 128.15722658736905], [[(115, 364), (212, 317)], 205.8518625420604], [[(68, 382), (210, 313)], 205.9158350024457], [[(70, 385), (212, 316)], 205.9158350024457], [[(209, 394), (242, 352)], 231.84277341263095], [[(145, 470), (239, 350)], 231.92721812600917], [[(142, 473), (238, 350)], 232.0283962389496], [[(208, 394), (240, 352)], 232.69605172201656], [[(268, 421), (291, 322)], 256.9208762199332], [[(267, 421), (290, 321)], 257.04723548662446], [[(271, 426), (293, 321)], 258.16635469383937], [[(353, 291), (489, 360)], 333.098907048459], [[(352, 295), (491, 360)], 334.93799174420553]], 3: [[[(412, 269), (565, 269)], 0.0], [[(399, 146), (433, 106)], 49.635463426902646], [[(400, 147), (467, 67)], 50.053826050064366], [[(413, 135), (440, 102)], 50.71059313749964], [[(403, 149), (435, 109)], 51.34019174590991], [[(326, 165), (352, 67)], 75.14138555207533], [[(142, 67), (270, 230)], 128.14169927622802], [[(149, 75), (270, 229)], 128.15722658736905], [[(115, 364), (212, 317)], 205.8518625420604], [[(71, 384), (170, 336)], 205.86635679409451], [[(68, 382), (210, 313)], 205.9158350024457], [[(70, 385), (212, 316)], 205.9158350024457], [[(145, 470), (239, 350)], 231.92721812600917], [[(142, 473), (238, 350)], 232.0283962389496], [[(259, 472), (269, 428)], 257.19573393471325], [[(337, 422), (348, 474)], 281.94417718844636], [[(341, 421), (372, 566)], 282.06776895865335], [[(338, 425), (349, 474)], 282.652556500558], [[(401, 393), (499, 515)], 308.77417093557426], [[(403, 391), (437, 432)], 309.66784111834045], [[(353, 291), (489, 360)], 333.098907048459], [[(352, 295), (491, 360)], 334.93799174420553]], 4: [[[(412, 269), (565, 269)], 0.0], [[(491, 177), (540, 156)], 23.19859051364819], [[(493, 182), (541, 158)], 26.56505117707799], [[(400, 147), (467, 67)], 50.053826050064366], [[(433, 110), (469, 67)], 50.063616853030084], [[(142, 67), (270, 230)], 128.14169927622802], [[(149, 75), (270, 229)], 128.15722658736905], [[(70, 155), (118, 178)], 154.39781244855823], [[(68, 159), (116, 181)], 155.37643521383637], [[(43, 268), (96, 268)], 180.0], [[(43, 272), (96, 272)], 180.0], [[(71, 384), (170, 336)], 205.86635679409451], [[(68, 382), (210, 313)], 205.9158350024457], [[(70, 385), (212, 316)], 205.9158350024457], [[(145, 470), (239, 350)], 231.92721812600917], [[(142, 473), (238, 350)], 232.0283962389496], [[(341, 421), (372, 566)], 282.06776895865335], [[(401, 393), (499, 515)], 308.77417093557426]], 5: [[[(341, 421), (372, 566)], 282.06776895865335], [[(360, 509), (374, 573)], 282.3390872783262], [[(464, 472), (499, 516)], 308.50065372034544], [[(401, 393), (499, 515)], 308.77417093557426]]}
    #     res = {0: [], 1: [[[(358, 268), (412, 268)], 0.0], [[(142, 67), (270, 230)], 128.14169927622802], [[(271, 426), (293, 321)], 258.16635469383937], [[(352, 295), (491, 360)], 334.93799174420553], [[(358, 272), (408, 273)], 358.85423716182487]], 2: [[[(412, 269), (565, 269)], 0.0], [[(326, 165), (352, 67)], 75.14138555207533], [[(267, 118), (280, 170)], 104.03624346792647], [[(142, 67), (270, 230)], 128.14169927622802], [[(68, 382), (210, 313)], 205.9158350024457], [[(142, 473), (238, 350)], 232.0283962389496], [[(271, 426), (293, 321)], 258.16635469383937], [[(352, 295), (491, 360)], 334.93799174420553]], 3: [[[(412, 269), (565, 269)], 0.0], [[(400, 147), (467, 67)], 50.053826050064366], [[(326, 165), (352, 67)], 75.14138555207533], [[(142, 67), (270, 230)], 128.14169927622802], [[(68, 382), (210, 313)], 205.9158350024457], [[(142, 473), (238, 350)], 232.0283962389496], [[(259, 472), (269, 428)], 257.19573393471325], [[(341, 421), (372, 566)], 282.06776895865335], [[(401, 393), (499, 515)], 308.77417093557426], [[(352, 295), (491, 360)], 334.93799174420553]], 4: [[[(412, 269), (565, 269)], 0.0], [[(493, 182), (541, 158)], 26.56505117707799], [[(400, 147), (467, 67)], 50.053826050064366], [[(142, 67), (270, 230)], 128.14169927622802], [[(70, 155), (118, 178)], 154.39781244855823], [[(43, 268), (96, 268)], 180.0], [[(68, 382), (210, 313)], 205.9158350024457], [[(142, 473), (238, 350)], 232.0283962389496], [[(341, 421), (372, 566)], 282.06776895865335], [[(401, 393), (499, 515)], 308.77417093557426]], 5: [[[(341, 421), (372, 566)], 282.06776895865335], [[(401, 393), (499, 515)], 308.77417093557426]]}
    #     self.assertEqual(res, Line_Detection.del_redundant_lines(line_levels))

    # def test_del_redundant_lines3(self):
    #     line_levels = {0: [], 1: [[[(379, 312), (481, 312)], 0.0], [[(231, 425), (292, 352)], 230.11731484997264], [[(225, 431), (291, 350)], 230.82634202955578], [[(164, 513), (294, 353)], 230.9061411137705], [[(379, 307), (520, 309)], 359.18734840574626]], 2: [[[(379, 312), (481, 312)], 0.0], [[(264, 41), (300, 210)], 102.02527960963532], [[(258, 15), (299, 207)], 102.05399167690892], [[(281, 106), (305, 209)], 103.11643612539146], [[(187, 246), (231, 267)], 154.48612957246576], [[(93, 198), (233, 264)], 154.7594707352132], [[(183, 244), (232, 266)], 155.82089285331082], [[(169, 308), (222, 308)], 180.0], [[(169, 312), (222, 311)], 181.0809241866607], [[(186, 379), (233, 357)], 205.0835940061909], [[(183, 376), (232, 353)], 205.14478563067894], [[(185, 381), (232, 356)], 208.00917670801383], [[(231, 425), (292, 352)], 230.11731484997264], [[(225, 431), (291, 350)], 230.82634202955578], [[(164, 513), (294, 353)], 230.9061411137705], [[(423, 354), (467, 376)], 333.434948822922], [[(418, 356), (512, 400)], 334.91640599380906], [[(421, 358), (513, 401)], 334.94902218355713], [[(379, 307), (520, 309)], 359.18734840574626]], 3: [[[(421, 186), (519, 69)], 50.05022842483281], [[(423, 189), (522, 66)], 51.170175095029606], [[(427, 187), (479, 118)], 52.997473471803836], [[(361, 158), (374, 107)], 75.69972255081441], [[(358, 158), (370, 106)], 77.00538320808349], [[(264, 41), (300, 210)], 102.02527960963532], [[(258, 15), (299, 207)], 102.05399167690892], [[(281, 106), (305, 209)], 103.11643612539146], [[(161, 106), (227, 190)], 128.15722658736905], [[(131, 65), (229, 187)], 128.77417093557423], [[(93, 198), (233, 264)], 154.7594707352132], [[(164, 513), (294, 353)], 230.9061411137705], [[(267, 563), (289, 461)], 257.82854179141253], [[(281, 513), (292, 462)], 257.82854179141253], [[(362, 461), (384, 563)], 282.17145820858747], [[(358, 462), (371, 515)], 283.78159723565363], [[(422, 433), (487, 514)], 308.74596725608353], [[(424, 431), (457, 472)], 308.8298249049704], [[(423, 434), (487, 513)], 309.0118516242245], [[(418, 356), (512, 400)], 334.91640599380906], [[(421, 358), (513, 401)], 334.94902218355713], [[(379, 307), (520, 309)], 359.18734840574626]], 4: [[[(513, 220), (563, 199)], 22.78240573048169], [[(514, 221), (563, 200)], 23.19859051364819], [[(517, 216), (607, 174)], 25.016893478100023], [[(512, 218), (607, 173)], 25.346175941946694], [[(421, 186), (519, 69)], 50.05022842483281], [[(423, 189), (522, 66)], 51.170175095029606], [[(427, 187), (479, 118)], 52.997473471803836], [[(264, 41), (300, 210)], 102.02527960963532], [[(258, 15), (299, 207)], 102.05399167690892], [[(161, 107), (191, 146)], 127.56859202882748], [[(161, 106), (227, 190)], 128.15722658736905], [[(131, 65), (229, 187)], 128.77417093557423], [[(93, 198), (233, 264)], 154.7594707352132], [[(164, 513), (294, 353)], 230.9061411137705], [[(267, 563), (289, 461)], 257.82854179141253], [[(362, 461), (384, 563)], 282.17145820858747], [[(422, 433), (487, 514)], 308.74596725608353], [[(423, 434), (487, 513)], 309.0118516242245], [[(533, 308), (586, 309)], 358.9190758133393]], 5: [[[(517, 216), (607, 174)], 25.016893478100023], [[(512, 218), (607, 173)], 25.346175941946694], [[(500, 91), (521, 66)], 49.96974072811031], [[(421, 186), (519, 69)], 50.05022842483281], [[(423, 189), (522, 66)], 51.170175095029606], [[(258, 15), (299, 207)], 102.05399167690892], [[(255, 5), (268, 63)], 102.63336193527502], [[(131, 65), (229, 187)], 128.77417093557423]]}
    #     res = {0: [], 1: [[[(379, 312), (481, 312)], 0.0], [[(164, 513), (294, 353)], 230.9061411137705], [[(379, 307), (520, 309)], 359.18734840574626]], 2: [[[(379, 312), (481, 312)], 0.0], [[(258, 15), (299, 207)], 102.05399167690892], [[(93, 198), (233, 264)], 154.7594707352132], [[(169, 312), (222, 311)], 181.0809241866607], [[(183, 376), (232, 353)], 205.14478563067894], [[(164, 513), (294, 353)], 230.9061411137705], [[(418, 356), (512, 400)], 334.91640599380906], [[(379, 307), (520, 309)], 359.18734840574626]], 3: [[[(423, 189), (522, 66)], 51.170175095029606], [[(358, 158), (370, 106)], 77.00538320808349], [[(258, 15), (299, 207)], 102.05399167690892], [[(131, 65), (229, 187)], 128.77417093557423], [[(93, 198), (233, 264)], 154.7594707352132], [[(164, 513), (294, 353)], 230.9061411137705], [[(267, 563), (289, 461)], 257.82854179141253], [[(362, 461), (384, 563)], 282.17145820858747], [[(422, 433), (487, 514)], 308.74596725608353], [[(418, 356), (512, 400)], 334.91640599380906], [[(379, 307), (520, 309)], 359.18734840574626]], 4: [[[(512, 218), (607, 173)], 25.346175941946694], [[(423, 189), (522, 66)], 51.170175095029606], [[(258, 15), (299, 207)], 102.05399167690892], [[(131, 65), (229, 187)], 128.77417093557423], [[(93, 198), (233, 264)], 154.7594707352132], [[(164, 513), (294, 353)], 230.9061411137705], [[(267, 563), (289, 461)], 257.82854179141253], [[(362, 461), (384, 563)], 282.17145820858747], [[(422, 433), (487, 514)], 308.74596725608353], [[(533, 308), (586, 309)], 358.9190758133393]], 5: [[[(512, 218), (607, 173)], 25.346175941946694], [[(423, 189), (522, 66)], 51.170175095029606], [[(258, 15), (299, 207)], 102.05399167690892], [[(131, 65), (229, 187)], 128.77417093557423]]}
    #     self.assertEqual(res, Line_Detection.del_redundant_lines(line_levels))


       

unittest.main()